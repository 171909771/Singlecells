library(monocle)
library(Seurat)
library(SeuratWrappers)
library(ggplot2)
library(patchwork)
library(magrittr)
library(ggsci)
library(tidyverse)

set.seed(1234)
p2gene <- readRDS('downstream analysis/p2_for_micrglia_0.6.rds')
p2gene_wcl <- subset(p2gene,value.MCAO>0.74 & value.Sham>0.74)

## 改变不同的单细胞位置
dat1 <-  readRDS('GSE174574/prunnedcelltype_auc.rds') 
dat1 <- subset(dat1,celltype=='Microglia')
dat1 <- subset(dat1,tmp=='MCAO')

DefaultAssay(object = dat1 ) <- "RNA"
expr_matrix <- as.matrix(dat1@assays[["RNA"]]@counts)
pd <- dat1@meta.data
fd <- data.frame(gene_short_name= rownames(expr_matrix) , row.names = rownames(expr_matrix))
pd <- new("AnnotatedDataFrame", data = pd)
fd <- new("AnnotatedDataFrame", data = fd)
cds <- newCellDataSet(cellData=expr_matrix, phenoData  = pd, featureData  = fd,
                      lowerDetectionLimit = 0.1)


cds <- estimateSizeFactors(cds)  
cds <- estimateDispersions(cds)
disp_table <- dispersionTable(cds) 
disp_table = disp_table %>% mutate(excess_disp = (dispersion_empirical - dispersion_fit) / dispersion_fit) %>% arrange(desc(excess_disp))
disp_table <- subset(disp_table,
                     mean_expression >= 0.1)

disp_table <- subset(disp_table,
                     mean_expression >= 0.5 & dispersion_empirical >= 1 * dispersion_fit)

disp_table <- subset(disp_table,
                     mean_expression >= 0.1 & dispersion_empirical >= 1 * dispersion_fit)

cds <- setOrderingFilter(cds, p2gene_wcl$genenames)
plot_pc_variance_explained(cds, return_all = F) # norm_method='log'
### 通过拐点确定n值
### max_components 的个数决定state个数
n= 2
cds <- reduceDimension(cds, num_dim = n,max_components = 3,reduction_method  = 'DDRTree') 
cds <- orderCells(cds,reverse = F)  #GSE174574 reverse=F


plot_cell_trajectory(cds, color_by = "Pseudotime")
plot_cell_trajectory(cds, color_by = "State")

plot_cell_trajectory(cds, color_by = "AUC") + scale_color_gsea()
plot_cell_trajectory(cds, color_by = "Cluster1") + scale_color_gsea()

#######################################################对不同的State进行GO分析
dat1@meta.data[["State"]] <- cds@phenoData@data[["State"]]

DefaultAssay(dat1)
Idents(dat1) <- dat1@meta.data[["State"]]

dat1.markers <- FindAllMarkers(dat1,
                               only.pos = TRUE, 
                               min.pct = 0.25, 
                               logfc.threshold = 0.25,
                               )

dat1.markers %>%
  group_by(cluster) %>%
  top_n(n = 10, wt = avg_log2FC) -> top10
dat1 <- ScaleData(dat1,features = top10$gene)
DoHeatmap(dat1, features = top10$gene) + NoLegend()

cluster1 <- subset(dat1.markers,cluster==2 & avg_log2FC>=0.25)
####接GO分析



