
# 出图 ----------------------------------------------------------------------


tmpheatmap <- function (cds_subset, branch_point = 1, branch_states = NULL, 
          branch_labels = c("Cell fate 1", "Cell fate 2"), cluster_rows = TRUE, 
          hclust_method = "ward.D2", num_clusters = 6, hmcols = NULL, 
          branch_colors = c("#979797", "#F05662", "#7990C8"), add_annotation_row = NULL, 
          add_annotation_col = NULL, show_rownames = FALSE, use_gene_short_name = TRUE, 
          scale_max = 3, scale_min = -3, norm_method = c("log", "vstExprs"), 
          trend_formula = "~sm.ns(Pseudotime, df=3) * Branch", return_heatmap = FALSE, geneSets,
          cores = 1, ...) 
{
  cds <- NA
  new_cds <- buildBranchCellDataSet(cds_subset, branch_states = branch_states, 
                                    branch_point = branch_point, progenitor_method = "duplicate", 
                                    ...)
  new_cds@dispFitInfo <- cds_subset@dispFitInfo
  if (is.null(branch_states)) {
    progenitor_state <- subset(pData(cds_subset), Pseudotime == 
                                 0)[, "State"]
    branch_states <- setdiff(pData(cds_subset)$State, progenitor_state)
  }
  col_gap_ind <- 101
  newdataA <- data.frame(Pseudotime = seq(0, 100, length.out = 100), 
                         Branch = as.factor(unique(as.character(pData(new_cds)$Branch))[1]))
  newdataB <- data.frame(Pseudotime = seq(0, 100, length.out = 100), 
                         Branch = as.factor(unique(as.character(pData(new_cds)$Branch))[2]))
  BranchAB_exprs <- genSmoothCurves(new_cds[, ], cores = cores, 
                                    trend_formula = trend_formula, relative_expr = T, new_data = rbind(newdataA, 
                                                                                                       newdataB))
  BranchA_exprs <- BranchAB_exprs[, 1:100]
  BranchB_exprs <- BranchAB_exprs[, 101:200]
  common_ancestor_cells <- row.names(pData(new_cds)[pData(new_cds)$State == 
                                                      setdiff(pData(new_cds)$State, branch_states), ])
  BranchP_num <- (100 - floor(max(pData(new_cds)[common_ancestor_cells, 
                                                 "Pseudotime"])))
  BranchA_num <- floor(max(pData(new_cds)[common_ancestor_cells, 
                                          "Pseudotime"]))
  BranchB_num <- BranchA_num
  norm_method <- match.arg(norm_method)
  if (norm_method == "vstExprs") {
    BranchA_exprs <- vstExprs(new_cds, expr_matrix = BranchA_exprs)
    BranchB_exprs <- vstExprs(new_cds, expr_matrix = BranchB_exprs)
  }
  else if (norm_method == "log") {
    BranchA_exprs <- log10(BranchA_exprs + 1)
    BranchB_exprs <- log10(BranchB_exprs + 1)
  }
  heatmap_matrix <- cbind(BranchA_exprs[, (col_gap_ind - 1):1], 
                          BranchB_exprs)
  heatmap_matrix = heatmap_matrix[!apply(heatmap_matrix, 1, 
                                         sd) == 0, ]
  heatmap_matrix = Matrix::t(scale(Matrix::t(heatmap_matrix), 
                                   center = TRUE))
  heatmap_matrix = heatmap_matrix[is.na(row.names(heatmap_matrix)) == 
                                    FALSE, ]
  heatmap_matrix[is.nan(heatmap_matrix)] = 0
  heatmap_matrix[heatmap_matrix > scale_max] = scale_max
  heatmap_matrix[heatmap_matrix < scale_min] = scale_min
  heatmap_matrix_ori <- heatmap_matrix
  heatmap_matrix <- heatmap_matrix[is.finite(heatmap_matrix[, 
                                                            1]) & is.finite(heatmap_matrix[, col_gap_ind]), ]
  row_dist <- as.dist((1 - cor(Matrix::t(heatmap_matrix)))/2)
  row_dist[is.na(row_dist)] <- 1
  exp_rng <- range(heatmap_matrix)
  bks <- seq(exp_rng[1] - 0.1, exp_rng[2] + 0.1, by = 0.1)
  if (is.null(hmcols)) {
    hmcols <- blue2green2red(length(bks) - 1)
  }
  
  labs.row <- rownames(cds_subset)
  labs.row[!labs.row %in% geneSets] <- ""

  
  ph <- pheatmap(heatmap_matrix, useRaster = T, cluster_cols = FALSE, 
                 cluster_rows = TRUE, show_rownames = F, show_colnames = F, 
                 clustering_distance_rows = row_dist, clustering_method = hclust_method, 
                 cutree_rows = num_clusters, silent = TRUE, filename = NA, 
                 breaks = bks, color = hmcols, labels_row = labs.row)
  annotation_row <- data.frame(Cluster = factor(cutree(ph$tree_row, 
                                                       num_clusters)))
  if (!is.null(add_annotation_row)) {
    annotation_row <- cbind(annotation_row, add_annotation_row[row.names(annotation_row), 
    ])
  }
  colnames(heatmap_matrix) <- c(1:ncol(heatmap_matrix))
  annotation_col <- data.frame(row.names = c(1:ncol(heatmap_matrix)), 
                               `Cell Type` = c(rep(branch_labels[1], BranchA_num), 
                                               rep("Pre-branch", 2 * BranchP_num), rep(branch_labels[2], 
                                                                                       BranchB_num)))
  colnames(annotation_col) <- "Cell Type"
  if (!is.null(add_annotation_col)) {
    annotation_col <- cbind(annotation_col, add_annotation_col[fData(cds[row.names(annotation_col), 
    ])$gene_short_name, 1])
  }
  names(branch_colors) <- c("Pre-branch", branch_labels[1], 
                            branch_labels[2])
  annotation_colors = list(`Cell Type` = branch_colors)
  names(annotation_colors$`Cell Type`) = c("Pre-branch", branch_labels)
  if (use_gene_short_name == TRUE) {
    if (is.null(fData(cds_subset)$gene_short_name) == FALSE) {
      feature_label <- as.character(fData(cds_subset)[row.names(heatmap_matrix), 
                                                      "gene_short_name"])
      feature_label[is.na(feature_label)] <- row.names(heatmap_matrix)
      row_ann_labels <- as.character(fData(cds_subset)[row.names(annotation_row), 
                                                       "gene_short_name"])
      row_ann_labels[is.na(row_ann_labels)] <- row.names(annotation_row)
    }
    else {
      feature_label <- row.names(heatmap_matrix)
      row_ann_labels <- row.names(annotation_row)
    }
  }
  else {
    feature_label <- row.names(heatmap_matrix)
    row_ann_labels <- row.names(annotation_row)
  }
  row.names(heatmap_matrix) <- feature_label
  row.names(annotation_row) <- row_ann_labels
  
  
  ph_res <- pheatmap(heatmap_matrix[, ], useRaster = T, cluster_cols = FALSE, 
                     cluster_rows = TRUE, show_rownames = show_rownames, 
                     show_colnames = F, clustering_distance_rows = row_dist, 
                     clustering_method = hclust_method, cutree_rows = num_clusters, 
                     annotation_row = annotation_row, annotation_col = annotation_col, 
                     annotation_colors = annotation_colors, gaps_col = col_gap_ind, 
                     treeheight_row = 20, breaks = bks, fontsize = 6, color = hmcols, 
                     border_color = NA, silent = TRUE, labels_row = labs.row)
  grid::grid.rect(gp = grid::gpar("fill", col = NA))
  grid::grid.draw(ph_res$gtable)
  if (return_heatmap) {
    return(list(BranchA_exprs = BranchA_exprs, BranchB_exprs = BranchB_exprs, 
                heatmap_matrix = heatmap_matrix, heatmap_matrix_ori = heatmap_matrix_ori, 
                ph = ph, col_gap_ind = col_gap_ind, row_dist = row_dist, 
                hmcols = hmcols, annotation_colors = annotation_colors, 
                annotation_row = annotation_row, annotation_col = annotation_col, 
                ph_res = ph_res))
  }
}



# 涉及的参数2个 -----------------------------------------------------------------

## 参数1

rgb.tables <- function(n,
                       red = c(0.75, 0.25, 1),
                       green = c(0.5, 0.25, 1),
                       blue = c(0.25, 0.25, 1))
{
  rr <- do.call("table.ramp", as.list(c(n, red)))
  gr <- do.call("table.ramp", as.list(c(n, green)))
  br <- do.call("table.ramp", as.list(c(n, blue)))
  rgb(rr, gr, br)
}

matlab.like <- function(n) rgb.tables(n)

matlab.like2 <- function(n)
  rgb.tables(n,
             red = c(0.8, 0.2, 1),
             green = c(0.5, 0.4, 0.8),
             blue = c(0.2, 0.2, 1))

blue2green2red <- matlab.like2


## 参数2
table.ramp <- function(n, mid = 0.5, sill = 0.5, base = 1, height = 1)
{
  x <- seq(0, 1, length.out = n)
  y <- rep(0, length(x))
  sill.min <- max(c(1, round((n - 1) * (mid - sill / 2)) + 1))
  sill.max <- min(c(n, round((n - 1) * (mid + sill / 2)) + 1))
  y[sill.min:sill.max] <- 1
  base.min <- round((n - 1) * (mid - base / 2)) + 1
  base.max <- round((n - 1) * (mid + base / 2)) + 1
  xi <- base.min:sill.min
  yi <- seq(0, 1, length.out = length(xi))
  i <- which(xi > 0 & xi <= n)
  y[xi[i]] <- yi[i]
  xi <- sill.max:base.max
  yi <- seq(1, 0, length.out = length(xi))
  i <- which(xi > 0 & xi <= n)
  y[xi[i]] <- yi[i]
  height * y
}

