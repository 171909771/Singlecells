
# 1.整理GSE77986数据 ------------------------------------------------------------
library(limma)
library(edgeR)
## 读取数据并转换一直的变量，改变dat1名称
dat=read.delim("GSE77986bulk-MM-microglia/GSE77986_series_matrix.txt.gz",header = T,comment.char = "!")
# library(devtools)
# install_github("jmzeng1314/AnnoProbe")
library(AnnoProbe)
gpl='GPL16570'
## 可以更换type信息，具体查看?idmap
probe2gene=idmap(gpl,type = 'soft')
head(probe2gene)

# 整理数据
dat1=merge(dat,probe2gene,by.x="ID_REF",by.y="ID")
dat <- aggregate(x = dat1[,2:(length(dat1)-1)],
                 by = list(dat1$symbol),
                 FUN = mean)
rownames(dat)=dat$Group.1
dat$Group.1=NULL


dat1 <- dat[c(1,2,3,7,8,9,10,11)]
colnames(dat1) <- c(paste(rep('Shamrep',3),1:3,sep = ""),paste(rep('MCAOrep',5),1:5,sep = ""))
dat1_GSE77986 <- dat1



# 2.整理GSE172456数据 -----------------------------------------------------------

library(limma)
library(edgeR)
## 读取数据并转换一直的变量，改变dat1名称
# dat=read.delim("GSE172456_Raw_gene_counts_matrix.csv.gz",header = T,comment.char = "!")
dat=read.csv("GSE172456bulk-timeseries--MM-microglia/GSE172456_Raw_gene_counts_matrix.csv.gz",header = T,comment.char = "!")
# library(devtools)
# install_github("jmzeng1314/AnnoProbe")
library(AnnoProbe)
rownames(dat) <- dat$X
dat$X <- NULL


# DESeq2归一化 
library(tidyverse)
library(DESeq2)
dat1 <- dat[1:4]
coldata <-data.frame(row.names = colnames(dat1),condition=str_split(colnames(dat1),'M',simplify = T)[,1])
dds <- DESeqDataSetFromMatrix(dat1, coldata, design= ~ condition )
dds <- DESeq(dds) 
dat2 <- counts(dds, normalized=TRUE)
dat2 <- log(dat2+1)
dat2 <- data.frame(dat2)
dat2_GSE172456 <- dat2


# 3.整理数据上传网站合并矩阵 ------------------------------------------------------------------


# http://www.badd-cao.net/cgi-bin/rank-in/calculate.py
# 用上面网站进行合并

dat1_GSE77986$genename <- rownames(dat1_GSE77986)
dat2_GSE172456$genename <- rownames(dat2_GSE172456)


dat_merge <- merge(dat1_GSE77986,dat2_GSE172456,by='genename')
colnames(dat_merge)[1]='gene'



write.table(dat_merge,"ExampleExpressionData.txt",sep="\t",row.names=FALSE,quote = F)

dat_platform <- data.frame(sample_name=colnames(dat_merge)[-1],	Platform=c(rep(1,8),rep(2,4)))

write.table(dat_platform,"ExamplePlatformData.txt",sep="\t",row.names=FALSE,quote = F)

dat_class <- data.frame(sample_name=colnames(dat_merge)[-1]	,Class=c(1,1,1,2,2,2,2,2,1,1,2,2))

write.table(dat_class,"ExampleSampleClass.txt",sep="\t",row.names=FALSE,quote = F)

# 4.计算bulk数据中的相关基因 ----------------------------------------------------------


dat <- read.table('GSE77986andGSE172456/result_exp.txt')
dat_sham <- dat[1:5]
dat_mcao <- dat[6:12]


####  整理数据，获取mcao、sham P2共表达基因
p2_dat_sham <- as.numeric(dat_sham['P2ry12',])
p2_dat_mcao <- as.numeric(dat_mcao['P2ry12',])

cor_dat_sham <- cor(p2_dat_sham,t(dat_sham))
cor_dat_sham <- data.frame(t(cor_dat_sham))
cor_dat_sham$genename <- rownames(cor_dat_sham)

cor_dat_mcao <- cor(p2_dat_mcao,t(dat_mcao))
cor_dat_mcao <- data.frame(t(cor_dat_mcao))
cor_dat_mcao$genename <- rownames(cor_dat_mcao)


cor_dat_sham_pro <- subset(cor_dat_sham,t.cor_dat_sham.>0.6)
cor_dat_mcao_pro <- subset(cor_dat_mcao,t.cor_dat_mcao.>0.6)

cor_dat_pro_merge <- merge(cor_dat_sham_pro,cor_dat_mcao_pro,by='genename')
cor_dat_pro_merge$plusvalue <- cor_dat_pro_merge$t.cor_dat_sham.+cor_dat_pro_merge$t.cor_dat_mcao.
cor_dat_pro_merge <- cor_dat_pro_merge[order(cor_dat_pro_merge$plusvalue,decreasing = T),]



# 5.mhg分析确立基因集 --------------------------------------------------------------



## mhg函数建立
library(mHG)
minhgeo=function(bulkgene,singlegene,p,n=length(singlegene)){
  bulkgene.p=bulkgene[1:round(length(bulkgene)*p*0.01)]
  singlegene.n=head(singlegene,n)
  tmp= bulkgene.p %in% singlegene.n
  result <- mHG.test(tmp)[["p.value"]]}

## 导入p2基因集
p2gene <- readRDS('downstream analysis/p2_for_micrglia_0.6.rds')

## 计算mhg的p值，单细胞的相关性从0.6-0.99，以0.01个单位增加；bulk的比例从前10%-50%，以1个单位增加
porport<- seq(0.6,0.99,0.01)
names(porport)=porport
topp <- seq(10,50,1)
names(topp)=topp
result <- lapply(topp, function(x){
  lapply(porport, function(y){
    p2gene_tmp <- subset(p2gene,value.MCAO>y &value.Sham >y)
    test <- minhgeo(cor_dat_pro_merge$genename,p2gene_tmp$genenames,x)

  })

})

## 整理数据，画图
result <- do.call(rbind,lapply(result,data.frame))
result1 <- result
result1$class <- rownames(result1)
library(reshape2)
result2 <- melt(result1,'class')
result2$variable <- str_split(result2$variable,'X',simplify = T)[,2]
result2$variable <- as.numeric(result2$variable)
ggplot(result2,aes(x=variable,y=value))+geom_point()+geom_smooth()


## 尝试取阈值。用alra的方法，将尾巴0.8后面的方差稳定的数值进行取标准差及平均数，
## 再用用所有数值根据前面的标准差及平均数取z-score，最后取第一个小于3倍标准差的index。
test <- apply(result, 2, sd)
sigma <- sd(test[21:40])
mu <- mean(test[21:40])
test1 <- (test-mu)/sigma
plot(seq(0.6,0.99,0.01),test)
