library(tidyverse)
library(Seurat)
library(patchwork)
options (warn = -1)

#导入数据


annotation1=readRDS('annotation2.finalcluster.rds')
#cluster变成tmp名字
annotation1@meta.data[["tmp"]]=annotation1@meta.data[["finalcluster"]]

annotation1@meta.data[["celltype.group"]]=annotation1@meta.data[["orig.ident"]]

annotation1@meta.data[["celltype.group"]][grep('Sham',ignore.case = T,annotation1@meta.data[["celltype.group"]])]='Sham'
annotation1@meta.data[["celltype.group"]][grep('MCAO',ignore.case = T,annotation1@meta.data[["celltype.group"]])]='MCAO'



#比较sham组及mcao组
vs1=function(data=annotation1,x='Sham',y='MCAO',cluster='Microglia'){
  #选取microglia及sham组
  cluster.nor=subset(data,celltype.group==x & tmp==cluster)
  cluster.mcao=subset(data,celltype.group==y & tmp==cluster)
  
  dat.cluster.nor=data.frame(GetAssayData(cluster.nor))
  dat.cluster.mcao=data.frame(GetAssayData(cluster.mcao))
  #分别对sham和mcao算每个基因的平均值及scale值
  rowaverage1=rowMeans(dat.cluster.nor)
  rowaverage1=data.frame(rowaverage1)
  rowaverage1$genenames=rownames(rowaverage1)
  sham.scalevalue=data.frame('genenames'=rowaverage1$genenames,
                             'value'=scale(rowaverage1$rowaverage1))
  
  
  rowaverage1=rowMeans(dat.cluster.mcao)
  rowaverage1=data.frame(rowaverage1)
  rowaverage1$genenames=rownames(rowaverage1)
  mcao.scalevalue=data.frame('genenames'=rowaverage1$genenames,
                             'value'=scale(rowaverage1$rowaverage1))
  
  data.merge=merge(mcao.scalevalue,sham.scalevalue,
                   by='genenames',suffixes = c(".mcao",".sham"))
  rownames(data.merge)=data.merge$genenames
  data.merge$choose=data.merge$value.mcao<data.merge$value.sham
  
  output=list(NOR=dat.cluster.nor,MCAO=dat.cluster.mcao,merge=data.merge)
  
  rm(list=ls()[ls()!='output'])
  gc()
  return(output)
}


#找p2的相关基因
correla=function(clustername,n=100){
  
  
  tmp=vs1(cluster=clustername)
  dat.cluster.mcao=tmp$MCAO
  dat.cluster.nor=tmp$NOR
  #每个分组中scale后的数值均值在MCAO和sham中的大小比较。
  data.merge=tmp$merge
  
  # mcao中 P2 的fit,由于太多p-value为0，故舍弃
  ## 理论基础 https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6191982/#__ffn_sectitle
  if(F){
    library(MASS)
    library(statmod)
    library(pscl)
    ###mcaogene###mcaogene###mcaogene###mcaogene###mcaogene###mcaogene###mcaogene###mcaogene
    y1=as.numeric(dat.cluster.mcao['P2ry12',])
    plot(density(y1))
    ##确认因变量的分布
    result.tweedie=apply(dat.cluster.mcao, 1, function(x){
      y=glm(y1~x,family=gaussian)
      y=summary(y)
      return(c(y$coefficients[2],y$coefficients[8],y$aic))
    })
    
    
    result.tweedie=data.frame(t(result.tweedie))
    colnames(result.tweedie)=c('slope','P-value','AIC')
    result.tweedie$genename=rownames(result.tweedie)
    ### 算adj-p
    result.tweedie$adjP=p.adjust(result.tweedie$`P-value`,method = 'BH')
    result.tweedie=result.tweedie[(result.tweedie$adjP < 0.001),]
    result.tweedie=na.omit(result.tweedie)
    ### 整理数据
    result.tweedie=result.tweedie[order(result.tweedie$adjP,result.tweedie$AIC,decreasing = c(FALSE, F)),]
    
    
    genemcao=result.tweedie$genename
    ###mcaogene###mcaogene###mcaogene###mcaogene###mcaogene###mcaogene###mcaogene###mcaogene
    y1=as.numeric(dat.cluster.nor['P2ry12',])
    plot(density(y1))
    ##确认因变量的分布
    result.tweedie=apply(dat.cluster.nor, 1, function(x){
      y=glm(y1~x,family=gaussian)
      y=summary(y)
      return(c(y$coefficients[2],y$coefficients[8],y$aic))
    })
    
    
    result.tweedie=data.frame(t(result.tweedie))
    colnames(result.tweedie)=c('slope','P-value','AIC')
    result.tweedie$genename=rownames(result.tweedie)
    ### 算adj-p
    result.tweedie$adjP=p.adjust(result.tweedie$`P-value`,method = 'BH')
    result.tweedie=result.tweedie[(result.tweedie$adjP < 0.001),]
    result.tweedie=na.omit(result.tweedie)
    ### 整理数据
    result.tweedie=result.tweedie[order(result.tweedie$adjP,result.tweedie$AIC,decreasing = c(FALSE, F)),]
    
    
    genenor=result.tweedie$genename
    
  }
  
  
  # 找P2相关性基因
  y1=as.numeric(dat.cluster.mcao['P2ry12',])
  plot(density(y1))
  y2=as.numeric(dat.cluster.nor['P2ry12',])
  plot(density(y2))
  
  testmcao=cor(y1,t(dat.cluster.mcao))
  testmcao=data.frame(value=t(testmcao))
  testmcao$genenames=rownames(testmcao)
  testmcao$absvalue=abs(testmcao$value)
  testmcao=testmcao[order(testmcao$absvalue,decreasing = T),]
  
  testnor=cor(y2,t(dat.cluster.nor))
  testnor=data.frame(value=t(testnor))
  testnor$genenames=rownames(testnor)
  testnor$absvalue=abs(testnor$value)
  testnor=testnor[order(testnor$absvalue,decreasing = T),]
  
  ## 找sham和mcao中同时与P2相关的基因
  test=merge(data.merge,testmcao,by='genenames')
  test=merge(test,testnor,by='genenames',suffixes = c("",".norcor"))
  test$order=test$absvalue+test$absvalue.norcor
  test=test[order(test$order,decreasing = T),]
  
  ## 确定取top n个基因
  test=head(test,n)
  # 计算
  
  cat(clustername,"mcao:",mean(test$value.mcao),'\n')
  cat(clustername,"sham:",mean(test$value.sham),'\n')
  pva=wilcox.test(test$value.mcao,test$value.sham)
  cat(clustername,'pvalue:',pva[["p.value"]],'\n')
  rm(list=ls()[ls()!='test'])
  gc()
  return(test)
  
}



genetmp=as.character(unique(annotation1@meta.data[["tmp"]]))
corlist=list()
for(i in genetmp){
  corlist[[i]]=correla(i)
  
}
