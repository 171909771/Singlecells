library(GEOquery)   # For downloading and loading GEO data
library(limma)      # For differential expression analysis
library(AnnoProbe)
library(GSVA)
library(GSEABase)
library(meta)
library(HardyWeinberg)

###############################################GSE23163


gse1 <- getGEO("GSE23163", GSEMatrix = TRUE)
expression_data1 <- exprs(gse1[[1]])
expression_data1 <- expression_data1[,c('GSM570185','GSM570186','GSM570187','GSM570188',
                                       'GSM570197','GSM570198','GSM570199','GSM570200')]
expression_data1 <- as.data.frame(expression_data1)
colnames(expression_data1) <- c(rep('Sham163',4),rep('Mcao163',4))


gpl='GPL6885'
## 可以更换type信息，具体查看?idmap
probe2gene=idmap(gpl,type = 'soft')
head(probe2gene)
expression_data1$ID_REF <- rownames(expression_data1)
# 整理数据
dat1=merge(expression_data1,probe2gene,by.x="ID_REF",by.y="ID")
dat <- aggregate(x = dat1[,2:(length(dat1)-1)],
                 by = list(dat1$symbol),
                 FUN = mean)
rownames(dat)=dat$Group.1
dat$Group.1=NULL
expr1 <- dat

###############################################GSE58720

gse2 <- getGEO("GSE58720", GSEMatrix = TRUE)
expression_data2 <- exprs(gse2[[1]])
expression_data2 <- as.data.frame(expression_data2)
expression_data2 <- expression_data2[,1:6]
colnames(expression_data2) <- c(rep('Sham720',3),rep('Mcao720',3))


gpl='GPL10787'
## 可以更换type信息，具体查看?idmap
probe2gene=idmap(gpl,type = 'soft')
head(probe2gene)
expression_data2$ID_REF <- rownames(expression_data2)
# 整理数据
dat1=merge(expression_data2,probe2gene,by.x="ID_REF",by.y="ID")
dat <- aggregate(x = dat1[,2:(length(dat1)-1)],
                 by = list(dat1$symbol),
                 FUN = mean)
rownames(dat)=dat$Group.1
dat$Group.1=NULL
expr2 <- dat


###############################################GSE28731

gse2 <- getGEO("GSE28731", GSEMatrix = TRUE)
expression_data2 <- exprs(gse2[[1]])
expression_data2 <- as.data.frame(expression_data2)
expression_data2 <- expression_data2[,c(1,2,5,6,7)]
colnames(expression_data2) <- c(rep('Sham731',2),rep('Mcao731',3))


gpl='GPL1261'
## 可以更换type信息，具体查看?idmap
probe2gene=idmap(gpl,type = 'soft')
head(probe2gene)
expression_data2$ID_REF <- rownames(expression_data2)
# 整理数据
dat1=merge(expression_data2,probe2gene,by.x="ID_REF",by.y="ID")
dat <- aggregate(x = dat1[,2:(length(dat1)-1)],
                 by = list(dat1$symbol),
                 FUN = mean)
rownames(dat)=dat$Group.1
dat$Group.1=NULL
expr3 <- dat







####################gsva1
gene_sets <-  getGmt("m5.all.v2023.1.Mm.symbols.gmt")


dat_expr=as.matrix(expr1)
gsva_result <- gsva(dat_expr, gene_sets, method = "gsva")



grouP <- c(rep("A", 4), rep("B", 4)) %>% as.factor()
desigN <- model.matrix(~ grouP + 0)
rownames(desigN) <- c(paste("A",1:4,sep = ""),paste("B",1:4,sep = ""))
desigN

### 用desigN的列名，设定B组比A组
comparE <- makeContrasts(grouPB - grouPA, levels=desigN)


fiT <- lmFit(gsva_result, desigN)
fiT2 <- contrasts.fit(fiT, comparE)
fiT3 <- eBayes(fiT2)
keggDiff <- topTable(fiT3, coef=1, number=200)
head(keggDiff, n=3)
keggDiff$geneset = rownames(keggDiff)
#这里使用表达矩阵中的基因TNFSF15进行演示，看看TNFSF15的表达与那些通路存在相关性。
KDM3A<-as.data.frame(dat_expr["Hcph",])
KDM3A<-t(KDM3A)
rownames(KDM3A)<-"Hcph"
cordat<-rbind(gsva_result,KDM3A)#将TNFSF15的表达数据与基因集的整合在一起
##包装batch_cor函数
batch_cor <- function(gene){
  y <- as.numeric(cordat[gene,])
  rownames <- rownames(cordat)
  do.call(rbind,future_lapply(rownames, function(x){
    dd  <- cor.test(as.numeric(cordat[x,]),y,type="spearman")
    data.frame(gene=gene,mRNAs=x,cor=dd$estimate,p.value=dd$p.value )
  }))
}
#开线程，完成相关性分析
library(future.apply)
plan(multiprocess)
system.time(dd <- batch_cor("Hcph"))
result1 <- dd


####################gsva2


dat_expr=as.matrix(expr2)
gsva_result <- gsva(dat_expr, gene_sets, method = "gsva")



grouP <- c(rep("A", 3), rep("B", 3)) %>% as.factor()
desigN <- model.matrix(~ grouP + 0)
rownames(desigN) <- c(paste("A",1:3,sep = ""),paste("B",1:3,sep = ""))


### 用desigN的列名，设定B组比A组
comparE <- makeContrasts(grouPB - grouPA, levels=desigN)


fiT <- lmFit(gsva_result, desigN)
fiT2 <- contrasts.fit(fiT, comparE)
fiT3 <- eBayes(fiT2)
keggDiff <- topTable(fiT3, coef=1, number=200)
head(keggDiff, n=3)
keggDiff$geneset = rownames(keggDiff)
#这里使用表达矩阵中的基因TNFSF15进行演示，看看TNFSF15的表达与那些通路存在相关性。
KDM3A<-as.data.frame(dat_expr["Ptpn6",])
KDM3A<-t(KDM3A)
rownames(KDM3A)<-"Ptpn6"
cordat<-rbind(gsva_result,KDM3A)#将TNFSF15的表达数据与基因集的整合在一起
##包装batch_cor函数
batch_cor <- function(gene){
  y <- as.numeric(cordat[gene,])
  rownames <- rownames(cordat)
  do.call(rbind,future_lapply(rownames, function(x){
    dd  <- cor.test(as.numeric(cordat[x,]),y,type="spearman")
    data.frame(gene=gene,mRNAs=x,cor=dd$estimate,p.value=dd$p.value )
  }))
}
#开线程，完成相关性分析
library(future.apply)
plan(multiprocess)
system.time(dd <- batch_cor("Ptpn6"))
result2 <- dd


####################gsva3



dat_expr=as.matrix(expr3)
gsva_result <- gsva(dat_expr, gene_sets, method = "gsva")



grouP <- c(rep("A", 2), rep("B", 3)) %>% as.factor()
desigN <- model.matrix(~ grouP + 0)
rownames(desigN) <- c(paste("A",1:2,sep = ""),paste("B",1:3,sep = ""))
desigN

### 用desigN的列名，设定B组比A组
comparE <- makeContrasts(grouPB - grouPA, levels=desigN)


fiT <- lmFit(gsva_result, desigN)
fiT2 <- contrasts.fit(fiT, comparE)
fiT3 <- eBayes(fiT2)
keggDiff <- topTable(fiT3, coef=1, number=200)
head(keggDiff, n=3)
keggDiff$geneset = rownames(keggDiff)
#这里使用表达矩阵中的基因TNFSF15进行演示，看看TNFSF15的表达与那些通路存在相关性。
KDM3A<-as.data.frame(dat_expr["Ptpn6",])
KDM3A<-t(KDM3A)
rownames(KDM3A)<-"Ptpn6"
cordat<-rbind(gsva_result,KDM3A)#将TNFSF15的表达数据与基因集的整合在一起
##包装batch_cor函数
batch_cor <- function(gene){
  y <- as.numeric(cordat[gene,])
  rownames <- rownames(cordat)
  do.call(rbind,future_lapply(rownames, function(x){
    dd  <- cor.test(as.numeric(cordat[x,]),y,type="spearman")
    data.frame(gene=gene,mRNAs=x,cor=dd$estimate,p.value=dd$p.value )
  }))
}
#开线程，完成相关性分析
library(future.apply)
plan(multiprocess)
system.time(dd <- batch_cor("Ptpn6"))
result3 <- dd







tmp1 = subset(result1, p.value<0.05)
tmp2 = subset(result2, p.value<0.05)
tmp3 = subset(result3, p.value<0.05)


merged_cor <- merge(tmp1, tmp2, by = "mRNAs")
merged_cor2 <- merge(merged_cor, tmp3, by = "mRNAs")



tmp <- apply(merged_cor2,1,function(y){
  cor_tmp = metacor(c(as.numeric(y[3]),as.numeric(y[6]),as.numeric(y[9])),c(8,6,5))
  postcor <- ifisherz(cor_tmp[["TE.random"]])   #必须将 Fish z 转换为 相关系数，这个function就是inversion
  final=c(y[1],postcor)
  
})

tmp <- t(tmp)

tmp = as.data.frame(tmp)
tmp$V2 = as.numeric(tmp$V2)

saveRDS(tmp,"multiarray_correlation_shp1.rds")
