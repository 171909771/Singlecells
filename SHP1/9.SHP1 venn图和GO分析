dat1 <-  readRDS('geneset1.rds')


tmp1 <- dat1[["MCAO"]][["Monocytes/Macrophages"]]
tmp2 <- dat1[["Sham"]][["Monocytes/Macrophages"]]
tmp1 <- subset(tmp1,value >= 0.6)
tmp2 <- subset(tmp2,value >= 0.6)

set1 <- tmp1$genenames
set2 <- tmp2$genenames



############################## plot venn
library(ggvenn)

# Prepare the data as logical vectors or columns
venn_data <- list( MCAO = set1,  Sham = set2)
myplot <- ggvenn(venn_data,set_name_size = 4)+ labs(title="Monocytes/Macrophages")+
  theme(plot.title = element_text(hjust = 0.5, vjust = -20))

ggsave("my_plot.png", plot = myplot, width = 5, height = 5, dpi = 300)

interdat <- intersect(set1,set2)


#################################GO ANALYSIS

library(GOplot)
library(ggplot2)
library(ggsci)
library(clusterProfiler)



GO_database <- 'org.Mm.eg.db' #GO分析指定物种，物种缩写索引表详见http://bioconductor.org/packages/release/BiocViews.html#___OrgDb
KEGG_database <- 'mmu' #KEGG分析指定物种，物种缩写索引表详见http://www.genome.jp/kegg/catalog/org_list.html

#gene ID转换
gene <- bitr(interdat,fromType = 'SYMBOL',toType = 'ENTREZID',OrgDb = GO_database)

GO<-enrichGO( gene$ENTREZID,#GO富集分析
              OrgDb = GO_database,
              keyType = "ENTREZID",#设定读取的gene ID类型
              ont = "BP",#(ont为ALL因此包括 Biological Process,Cellular Component,Mollecular Function三部分）
              pvalueCutoff = 0.05,#设定p值阈值
              qvalueCutoff = 0.05,#设定q值阈值
              readable = T)

goresult <- GO@result


## 出图  （废除）
myplot <- dotplot(GO, showCategory =20,label_format=100)
ggsave("my_plot.png", plot = myplot, width = 10, height = 5, dpi = 300,scale =1.5)


## 出sigaling图

goresult <- goresult[grep("signaling",goresult$Description),]


goresult$GeneRatio <- goresult$Count / sum(goresult$Count)


goresult <- subset(goresult,pvalue <0.05)

goresult <- goresult[order(goresult$GeneRatio,decreasing = F),]
goresult$Description <- factor(goresult$Description, levels = goresult$Description)



myplot <- ggplot(goresult, aes(x = GeneRatio, y = Description, size = Count, col = pvalue)) + 
  geom_point() +
  theme_classic() +
  scale_color_gradient(low = "blue", high = "red") +
  theme(axis.title.y = element_blank())




ggsave("my_plot.png", plot = myplot, width = 12, height = 8, dpi = 300,scale =0.8)
ggsave("my_plot.png", plot = myplot, width = 12, height = 8, dpi = 300,scale =1)
