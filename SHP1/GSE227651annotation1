
suppressMessages(library(SingleR))
suppressMessages(library(scmap))
suppressMessages(library(dplyr))
suppressMessages(library(SingleCellExperiment))
suppressMessages(library(scater))
suppressMessages(library("celldex"))
suppressMessages(library(qusage))
suppressMessages(library(scuttle))
suppressMessages(library(scran))
suppressMessages(library(Seurat))

## 读取数据
obj.merge <- readRDS('umap_tsne.rds')

mouseRNA <- MouseRNAseqData()
ref=mouseRNA

# ref的rowData中没有feature_symbol，加入下面代码
rowData(ref)$feature_symbol <- rownames(ref)

# 设定成scamp需要的格式,需要用到cell_type1
colData(ref)$cell_type1 <- colData(ref)$label.fine
# 导入SingleCellExperiment数据
ref_sce <- SingleCellExperiment(assays=list(logcounts=assays(ref)$logcounts), 
                                colData=colData(ref), rowData=rowData(ref))


# 找变异基因，top500
dec <- modelGeneVar(ref_sce)
top.hvgs2 <- getTopHVGs(dec, n=500)
top.hvgs2=top.hvgs2[top.hvgs2 %in% rownames(obj.merge)]
# 导入数据种
ref_sce <- setFeatures(ref_sce, features =top.hvgs2)



# 按照cell计算
ref_sce <- scmap::indexCell(ref_sce)
scmap_cell_reference <- metadata(ref_sce)$scmap_cell_index
scmap_cell_metadata <- colData(ref_sce)




query_sce <- SingleCellExperiment(assays=
                                    list(counts=obj.merge@assays[["alra"]]@data))
rowData(query_sce)$feature_symbol <- rownames(query_sce)
logcounts(query_sce)=query_sce@assays@data@listData[["counts"]]

# 基于cell注释
nearest_neighbours <- scmap::scmapCell(projection=query_sce, 
                                       index_list = list(ref1 = scmap_cell_reference), 
                                       w=10)
gc()
mode_label <- function(neighbours, metadata=scmap_cell_metadata$cell_type1) {
  freq <- table(metadata[neighbours])  #非常巧妙的统计每个query细胞的可能细胞类型，neighbours代表query每个细胞类型标号，metadata代表ref每个细胞类型
  label <- names(freq)[which(freq == max(freq))]
  if (length(label) > 1) {return("ambiguous")}
  return(label)
}

scmap_cell_labs <- apply(nearest_neighbours$ref1$cells, 2, mode_label)
colData(query_sce)$scmap_cell <- scmap_cell_labs

##########################singleR
## 基于cell
predictions <- SingleR::SingleR(test=query_sce, ref=ref, labels=ref$label.fine)
sum(is.na(predictions$pruned.labels))
predictions$pruned.labels[which(is.na(predictions$pruned.labels))] <- "ambiguous"
colData(query_sce)$singleR_cell <- predictions$pruned.labels

gc()



## 整理注释数据集
###1.scmap_cell
scampcell=factor(query_sce@colData@listData[["scmap_cell"]],
                 levels = unique(query_sce@colData@listData[["scmap_cell"]]))

###2.singleR_cell
singleRcell=factor(query_sce@colData@listData[["singleR_cell"]],
                   levels = unique(query_sce@colData@listData[["singleR_cell"]]))

rm(list=ls()[!ls() %in% c('obj.merge','scampcell','singleRcell')])
gc()


## marker 注释 for scina
##### cellmarker 的ref制作

library(readxl)
# http://yikedaxue.slwshop.cn/download.php 下载地址
dat1=read_excel('Cell_marker_All.xlsx')
# 取dataset中下面的条件
dat1=subset(dat1,Species=='Mouse' & `Tissue class` == 'Brain' & `Cancer type`=='Normal')
# 整理数据
dat1=dat1[c('Cell name','Symbol')]
list1= split(dat1, dat1$`Cell name`)
list1=lapply(list1, function(x){
  x$Symbol})

## 1.去除重复项基因
list1=lapply(list1, function(x){
  x=unique(x)
})

## 2.去除querydata中没有的gene
gene1=rownames(obj.merge)
list1=lapply(list1, function(x){
  x=x[x%in% gene1]
  if(length(x)>0){
    return(x)
  }
})

## 3.数据集中大于200的基因进行seurat的FindVariableFeatures提取高变异基因200个
list1=lapply(list1, function(x){
  if(length(x)>200){
    tmp <- obj.merge[x,]
    tmp@assays[["alra"]]@counts=tmp@assays[["alra"]]@data   # alra的counts中没有数值，向alra的counts中填充值
    tmp <- FindVariableFeatures(tmp, selection.method = "vst", nfeatures = 200)
    return(tmp@assays[["alra"]]@var.features)
  }
  return(x)
})
## 4.去除NULL的list
list1=Filter(Negate(is.null), list1)
list1 <- list1[lengths(list1)!=0]

# scina处理前准备
exprMatrix <- as.matrix(obj.merge@assays[["alra"]]@data)
# 关键步骤
predictions.scina = SCINA::SCINA(exp = exprMatrix, signatures = list1,
                                 rm_overlap = F, allow_unknown = F)


# 导入数据
cellmarkergene=factor(predictions.scina[["cell_labels"]],
                      levels = unique(predictions.scina[["cell_labels"]]))
rm(list=ls()[!ls() %in% c('obj.merge','scampcell','singleRcell','cellmarkergene')])
gc()

data_annotation <- data.frame(cellmarkergene=cellmarkergene,
                              scampcell=scampcell,
                              singleRcell=singleRcell)



saveRDS(data_annotation,file='table_annotation.rds')
